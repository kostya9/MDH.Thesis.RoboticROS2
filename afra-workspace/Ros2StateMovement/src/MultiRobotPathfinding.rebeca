env int msgDelay = 20;
env int pathfinderDelay = 50;
env int moveDelay = 100;

env int MAPSIZE = 10;

env double laserDist = 3;
env double INFINITY = 9999;
env int lasers = 10;
env double pi = 3.14;
env double minAngle = pi / 4;
env double maxAngle = 3 * pi / 4;
env double angleIncrement = (maxAngle - minAngle) / lasers;
env double laserLength = 10.0;
env double steps = 15;
env double stepLength = laserLength / steps;

// The marker of an obstacle on the map
env int OBSTACLE = -1;


// ROTATIONS
env int NORTH = 0;
env int EAST = 1;
env int SOUTH = 2;
env int WEST = 3;

reactiveclass Map(15) {
	statevars {
		int[10][10] map;
	}
	
	Map() {
		setCollisions();
	}
	
	// Moves the robot from source position to target position on the map
	msgsrv move(int xFrom, int yFrom, int xTo, int yTo) {
		int prev = map[xFrom][yFrom];
		
		if(prev != OBSTACLE) {
			assertion(false, "Expected the FROM coordinate to be an obstacle");
		}
		
		int to = map[xTo][yTo];
		
		if(to == OBSTACLE) {
			assertion(false, "Expected the TO coordinate not to be an obstacle");
		}
		
		map[xFrom][yFrom] = 0;
		map[xTo][yTo] = OBSTACLE;
	}
	
	msgsrv subscribeToMapInfo() {
		infiniteMapInfoSend((RobotHardware)sender) after(msgDelay);
	}
	
	msgsrv infiniteMapInfoSend(RobotHardware h) {
		h.laserScanSend(map);
		
		infiniteMapInfoSend(h) after(msgDelay);
	}
	
	// Workaround the lack of generics - the same subscription logic as in subscribeToMapInfo 
	msgsrv subscribeToMapInfoFromFollower() {
		infiniteMapInfoSendToFollower((SimpleFollower)sender) after(moveDelay);
	}
	
	msgsrv infiniteMapInfoSendToFollower(SimpleFollower f) {
		f.onMap(map);
		
		infiniteMapInfoSendToFollower(f) after(moveDelay);
	}
	
	// The initial position of the ROBOTs
	msgsrv setInitialPosition(int x, int y)
	{
		int to = map[x][y];
		
		if(to == OBSTACLE) {
			assertion(false, "Expected the TO coordinate not to be an obstacle");
		}
		
		map[x][y] = OBSTACLE;
	}
	
	// USE THIS METHOD TO SET OBSTACLES ON THE MAP
	void setCollisions() { 
		map[1][0] = OBSTACLE;
		map[1][1] = OBSTACLE;
	}
}

reactiveclass RobotHardware(10) {
	knownrebecs {
		Robot robot;
		Map mapRebec;
	}
	
	statevars {
		int posX;
		int posY;
		int rot;
		boolean moving;
		
		int nextRot;
		
		// variables for assertion
		int prevPosX;
		int prevPosY;
		int prevRot;
		boolean isFirstState;
	}
	
	RobotHardware(int x, int y, int r)
	{
		posX = x;
		posY = y;
		rot = r;
		
		initMap();
		
		
		moving = true;
		isFirstState = true;
		
		nextRot = rot;

		moveActuator() after(moveDelay);
	}
	
	void initMap() {
		mapRebec.setInitialPosition(posX, posY);
		mapRebec.subscribeToMapInfo();
	}
	
	double tan(double angle) {
		if(angle > (pi / 2)) {
			angle = angle - pi;
		}
		
		double x = angle;
		// taylor series expansion
		return x + x*x*x / 3 + 2*x*x*x*x*x/15; 
	}
	
	double abs(double x) {
		if(x < 0) {
			return -x;
		}
		
		return x;
	}
	
	double sqrt(double x) {
		// Taylor series was not precise enough, so
		// Newton's method was implemented here
		double prev = 4;
		double next = 5;
		while(abs(prev - next) > 0.1) {
			prev = next;
			next = 0.5 * ((x/prev) + prev);
		}
		
		return next;
	}
	
	double getDistanceToCollision(int[10][10] map, double dy, double curAngle) {
		// f(x) = kx
		// x = f(x) / k
		// where k - the tangent of tilt angle
		double dx = dy / tan(curAngle);
		int turnedX, turnedY;
				
		if(rot == NORTH)
		{
			turnedX = (int)dx;
			turnedY = (int)dy;
		}
		else if(rot == EAST)
		{
			turnedX = (int)dy;
			turnedY = (int)-dx;
		}
		else if(rot == SOUTH)
		{
			turnedX = (int)-dx;
			turnedY = (int)-dy;
		}
		else if (rot == WEST)
		{
			turnedX = (int)-dy;
			turnedY = (int)dx;
		}
		
		int yIndx = posY + turnedY;
		int xIndx = posX + turnedX;
		
		// check collision with end of map
		if ((yIndx >= MAPSIZE) || (yIndx < 0)) {
			return 0;
		}
		
		// check collision with end of map
		if((xIndx >= MAPSIZE) || (xIndx < 0)) {
			return 0;
		}
		
		if(xIndx == posX && yIndx == posY) {
			return INFINITY;
		}
		
		if(map[xIndx][yIndx] == OBSTACLE) {
			return sqrt(dy * dy + dx * dx);
		}
		
		return INFINITY;
	}
	
	// Send laser data to robot software - SENSOR PUBLISHER
	msgsrv laserScanSend(int[10][10] map) {
		double[10] dists;
		// init array
		for(int i = 0; i < lasers; i++) {
			dists[i] = INFINITY;
		}

		// for each laser 
		// go through distances from stepLength to laserLength
		// and if there is collision (and it is the first collision) 
		//     write the distance to it
		// else
		//     do nothing
		double curAngle = minAngle;
		for(int i = 0; i < lasers; i++) {
		
			// test the cells for collision where f(x) = dy
			// f(x) - laser ray function
			for (double dy = stepLength; dy <= laserLength; dy += stepLength) {
				if(dists[i] == INFINITY) {
					dists[i] = getDistanceToCollision(map, dy, curAngle);
				}
			}
			curAngle = curAngle + angleIncrement;
		}
		
		robot.onLaserScan(posX, posY, rot, moving, dists);
	}
	
	// Move the actual robot (change pos) - PERIODIC MOVEMENT MSG SERVER
	msgsrv moveActuator() {
		if(nextRot != rot) {
			// rotating
			prevRot = rot;
			rot = nextRot;
		}
		// no movement when finished
		else if(moving)
		{
			int dx, dy;
			if(rot == NORTH)
			{
				dx = 0;
				dy = 1;
			}
			else if(rot == EAST)
			{
				dx = 1;
				dy = 0;
			}
			else if(rot == SOUTH)
			{
				dx = 0;
				dy = -1;
			}
			else if (rot == WEST)
			{
				dx = -1;
				dy = 0;
			}
			
			self.prevPosX = posX;
			self.posX += dx;
			self.prevPosY = posY;
			self.posY += dy;

			mapRebec.move(prevPosX, prevPosY, posX, posY);
		}
		
		self.isFirstState = false;
		moveActuator() after(moveDelay);
	}
	
	// Enable movement - ACTUATOR
	msgsrv move() {
		moving = true;
	}
	
	// Stop movement - ACTUATOR
	msgsrv stop() {
		moving = false;
	}
	
	// Rotate left - ACTUATOR
	msgsrv turnLeft() {
		if(rot == 0) {
			nextRot = 3;
		} else {
			nextRot = rot - 1;
		}
	}
	
	// Rotate right - ACTUATOR
	msgsrv turnRight() {
		if(rot == 3) {
			nextRot = 0;
		} else {
			nextRot = rot + 1;
		}
	}
}

reactiveclass Pathfinder(50)
{
	statevars {
	    int targetX;
	    int targetY;
	    
	    boolean[10][10] map;
	    
	    boolean changed;
	    
	    int changeTimes;
	}
	
	msgsrv setTargetPosition(int x, int y) {
		self.targetX = x;
		self.targetY = y;
		self.changed = true;
	}
	
	double getYawFromRot(int rot) {
		if(rot == NORTH)
		{
			return pi/2.0;
		}
		else if(rot == EAST)
		{
			return 0;
		}
		else if(rot == SOUTH)
		{
			return -pi/2.0;
		}
		else if (rot == WEST)
		{
			return pi;
		}
	}
	
	double distTo(double x, double y, double xTarget, double yTarget) {
		double dy = y - yTarget;
		double dx = x - xTarget;
		return dy * dy + dx * dx;
	}
	
	int[30] clearList(int[30] list) {
		for(int i = 0; i < 30; i++) {
			list[i] = -1;
		}
		
		return list;
	}
	
	int[30] addToList(int[30] list, int value) {
		boolean added = false;
		for(int i = 0; i < 30; i++) {
			if(list[i] == -1) {
				added = true;
				list[i] = value;
				break;
			}
		}
		
		assertion(added, "buffer overflow");
		return list;
	}
	
	int[30] removeFromList(int[30] list, int idx) {
		int lastIdx = 29; 
		for(int i = 0; i < 30; i++) {
			if(list[i] == -1) {
				lastIdx = i - 1;
				break;
			}
		}
		
		// Swap with the last element
		// and erase new last element
		int toDelete = list[idx];
		list[idx] = list[lastIdx];
		list[lastIdx] = -1;
		
		return list;
	}
	
	int findIdxInList(int[30] list, int value) {
		for(int i = 0; i < 30; i++) {
			if(list[i] == value) {
				return i;
			}
			
			if(list[i] == -1) {
				return -1;
			}
		}
		
		return -1;
	}
	
	int size(int[30] list) {
		for(int i = 0; i < 30; i++) {
			if(list[i] == -1) {
				return i;
			}
		}
		
		return 30;
	}
	
	double cos(double x) {
		return 1 - x*x/2 + x*x*x*x/24- x*x*x*x*x*x/720 + x*x*x*x*x*x*x*x/40320;
	}
	
	double sin(double x) {
		return x - x*x*x/6 + x*x*x*x*x/120- x*x*x*x*x*x*x/5040 + x*x*x*x*x*x*x*x*x/362880;
	}
	
	int posToIdx(int x, int y) {
		return x + y * MAPSIZE;
	}
	
	int idxToY(int idx) {
		return idx / MAPSIZE;
	}
	
	int idxToX(int idx) {
		return idx % MAPSIZE;
	}
	
	int idxOfSmallestF(int[30] openList, double[10][10] fs) {
		int smallestIdx = 0;
		double smallestF = openList[0];
		for(int i = 0; i < 30; i++) {
			int cur = openList[i];
			if(cur == -1) {
				break;
			}
			
			int x = idxToX(cur);
			int y = idxToY(cur);
			double curF = fs[x][y];
			if(curF < smallestF) {
				smallestF = curF;
				smallestIdx = i;
			}
		}
		
		return smallestIdx;
	}
	
	int[30] generatePathFromTarget(int[10][10] parents, int xPos, int yPos) {
		int[30] path;
		path = clearList(path);
		
		int els = 0;
		int parent = posToIdx(targetX, targetY);
		while(true) {
			int x = idxToX(parent);
			int y = idxToY(parent);
			if(x == xPos && y == yPos) {
				break;
			}
			
			path = addToList(path, parent);
			els++;
			parent = parents[x][y];
		}
		
		
		// Reverse the path;
		for(int idx = 0; idx < els / 2; idx++) {
			int endElIdx = els - idx - 1;
			int endEl = path[endElIdx];
			path[endElIdx] = path[idx];
			path[idx] = endEl;
		}
		
		return path;
	}
	
	int[8] initArray(int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8) {
		int[8] arr;
		arr[0] = x1;
		arr[1] = x2;
		arr[2] = x3;
		arr[3] = x4;
		arr[4] = x5;
		arr[5] = x6;
		arr[6] = x7;
		arr[7] = x8;
		return arr;
	}
	
	// Full AStar implementation (uses the internal map)
	/*@priority(2)*/ msgsrv calcPath(int xPos, int yPos, int rot) {
		if(changed) {
			changed = false;
			
			int[10][10] parents;
	    
		    int[30] openList;
		    int[30] closedList;
		    double[10][10] hs;
		    double[10][10] gs;
		    double[10][10] fs;
			
			openList = clearList(openList);
			closedList = clearList(closedList);
			
			int curPos = posToIdx(xPos, yPos);
			openList = addToList(openList, curPos);
			
			// Init data for neighbor search
			int[8] dxs = initArray(1, 1, 0, -1, -1, -1, 0, 1);
			int[8] dys = initArray(0, 1, 1, 1, 0, -1, -1, -1);
			
			boolean foundPath = false;
			// Untill we have no cells to handle
			while(size(openList) != 0) {
				
				// Take a cell from the open list
				int curOpenListIdx = idxOfSmallestF(openList, fs);
				int curNodeIdx = openList[curOpenListIdx];
				openList = removeFromList(openList, curOpenListIdx);
				
				// We will handle it, so the next iteration should find it in the closed list
				closedList = addToList(closedList, curNodeIdx);
				
				int x = idxToX(curNodeIdx);
				int y = idxToY(curNodeIdx);
				if(x == targetX && y == targetY) {
					// We found the path, let's give it to the Robot
					int[30] path = generatePathFromTarget(parents, xPos, yPos);
					foundPath = true;
					((Robot)sender).onNewPath(path);
					break;
				}
				
				// Find the nearest neighbor (according to rotation)
				int startNeighbor;
				if(rot == EAST) {
					startNeighbor = 0;
				} else if(rot == NORTH) {
					startNeighbor = 2;
				}
				else if(rot == WEST) {
					startNeighbor = 4;
				}
				else if (rot == SOUTH) {
					startNeighbor = 6;
				}
				
				// for each neighbor
				for(int i = 0; i < 8; i++) {
					int dx = dxs[(startNeighbor + i) % 8];
					int dy = dys[(startNeighbor + i) % 8];
					
					// IGNORE DIAGONALS
					if(dx + dy != 1 && dx + dy != -1) {
						continue;
					}
					
					int neighborX = x + dx;
					int neighborY = y + dy;
					int neighborIdx = posToIdx(neighborX, neighborY);
					
					if(neighborX < 0 || neighborX >= MAPSIZE ||
						neighborY < 0 || neighborY >= MAPSIZE) {
						continue;
					}
					
					// If there is an obstacle, assume path invalid
					boolean obstacle = map[neighborX][neighborY];
					if(obstacle) {
						continue;
					}
					
					int alreadyInClosedList = findIdxInList(closedList, neighborIdx);
					if(alreadyInClosedList != -1) {
						continue;
					}
					
					// Calculate scores
					double g = gs[x][y] + 1; // The length of the path until here
					double h = distTo(neighborX, neighborY, targetX, targetY); // The predicted length of path to the target
					double f = g + h; // 'Cost' of current cell
					
					int alreadyInOpenList = findIdxInList(openList, neighborIdx);
					if(alreadyInOpenList != -1) {
						if(g > gs[neighborX][neighborY]) {
							continue;
						}
					}
					
					// Update intermediate cost and path tables
					parents[neighborX][neighborY] = curNodeIdx;
					gs[neighborX][neighborY] = g;
					hs[neighborX][neighborY] = h;
					fs[neighborX][neighborY] = f;
					openList = addToList(openList, neighborIdx);
				}
			}
			
			if(!foundPath) {
				assertion(false, "Could not generate path");
			}
		}
	}
	
	int round(double x) {
		double d = x - (int)x;
		
		
		if(x < 0) {
			if(d < -0.9) {
				return (int)x - 1;
			}
			
			return (int)x;
		}
		
		if(d > 0.9) {
			return (int)x + 1;
		}
		
		return (int)x;
	}
	
	// Register a single obstacle on the map
	void addCollision(double distance, double dYaw, int posX, int posY, int rot) {
		double rotYaw = getYawFromRot(rot);
		double yaw = rotYaw + dYaw - pi/2;
	    double colTargetX = posX + distance * cos(yaw);
	    double colTargetY = posY + distance * sin(yaw);
	    
	    int targetXIndex = round(colTargetX);
	    int targetYIndex = round(colTargetY);
	
	    if(targetXIndex < 0 || targetXIndex >= MAPSIZE || 
	        targetYIndex < 0 || targetYIndex >= MAPSIZE) 
	    {
	       // out of bounds
	    } else {
	    	if(!map[targetXIndex][targetYIndex]) {
	    		// Mark than we need to rebuild the path 
	    		self.changed = true;
	    		map[targetXIndex][targetYIndex] = true;
	    	}
	    }
	}
	
	// Register all the obstacles on the map
	/*@priority(1)*/ msgsrv addCollisions(double[10] collisions, double[10] angles, int collisionsCount, int posX, int posY, int rot) {
		for(int i = 0; i < collisionsCount; i++) {
			addCollision(collisions[i], angles[i], posX, posY, rot);
		}
	}
}

reactiveclass Robot(10) {
	knownrebecs {
		RobotHardware rh;
		Pathfinder pf;
	}
	
	statevars {
		int curX;
		int curY;
		int curRot;
		int targetX;
		int targetY;
		boolean finish;
		int[30] path;
		int curPathIdx;
	}
	
	Robot(int x, int y) {
		self.targetX = x;
		self.targetY = y;
		self.setTargetPos(); // cannot send to knownrebec
		self.rebuildPath() after(pathfinderDelay);
	}
	
	msgsrv setTargetPos() {
		pf.setTargetPosition(self.targetX, self.targetY);
	}
	
	// Periodically request path rebuild (if needed)
	/*@priority(1)*/ msgsrv rebuildPath() {
		pf.calcPath(curX, curY, curRot);
		
		self.rebuildPath() after(pathfinderDelay);
	}

	// Save obstacles, avoid collisions in response to laser information - SENSOR SUBSCRIBER
	/*@priority(2)*/ msgsrv onLaserScan(int posX, int posY, int rot, boolean moving, double[10] laserDistances) {
		if(!finish) {
			curX = posX;
			curY = posY;
			curRot = rot;
			
			// Extract collision information
			double curAngle = minAngle;
			double[10] collisions;
			double[10] angles;
			int collisionsCount = 0;
			for(int i = 0; i < 10; i++) {
				double dist = laserDistances[i];
				
				if(dist != INFINITY && dist != 0) {
					collisions[collisionsCount] = dist;
					angles[collisionsCount] = curAngle;
					collisionsCount++;
				}
				
				curAngle = curAngle + angleIncrement;
			}
			
			// Pass the collision info to the PathFinder reactiveclass
			if(collisionsCount > 0) {
				pf.addCollisions(collisions, angles, collisionsCount, posX, posY, rot);
			}
			
			// Move according to the path that the PathFinder generated
			moveNaive(posX, posY, rot, moving);
		}
	}
	
	void moveNaive(int posX, int posY, int rot, boolean moving) {
		// Get the current path checkpoint
		int curPathNode = path[curPathIdx];
		int nextX = curPathNode % MAPSIZE;
		int nextY = curPathNode / MAPSIZE;
		
		if(nextX == posX && nextY == posY && curPathNode != -1) {
			// If the next checkpoint is on current position, then assume that we passed it
			curPathIdx++;
		}
		
		if(curPathNode == -1) {
			rh.stop();
		}
		if(posX == self.targetX && posY == self.targetY) {
			if(!finish) {
				// assertion(false, "FINISHED!!");
				rh.stop();
				finish = true;
			}
		} else {
			// Rotate to the next path checkpoint if needed. 
			// If not - move to the next checkpoint
			boolean stop = false;
			if(nextY > posY) {
				if(rot != NORTH) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(nextY < posY) {
				if(rot != SOUTH) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(nextX > posX) {
				if(rot != EAST) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(nextX < posX) {
				if(rot != WEST) {
					rh.turnRight();
					stop = true;
				}
			}
			
			if(stop && moving) {
				rh.stop();
			}
			else if(!moving && !stop) {
				rh.move();
			}
		}
	}
	
	msgsrv onNewPath(int[30] newPath) {
		self.path = newPath;
		self.curPathIdx = 0;
	}
}

reactiveclass SimpleFollower(20) {
	knownrebecs {
		Map map;
	}

	statevars {
		int[4] path;
		int posX;
		int posY;
		int pathPosition;
		int maxPathPosition;
		boolean stop;
	}
	
	SimpleFollower() {
		path[0] = 3;
		path[1] = 2;
		path[2] = 1;
		path[3] = 0;
		posX = 4;
		posY = 0;
		pathPosition = 0;
		maxPathPosition = 4;
		startMoving();
	}
	
	void startMoving() {
		map.setInitialPosition(posX, posY);
		map.subscribeToMapInfoFromFollower();
		move() after(2 * moveDelay);
	}
	
	// GETS THE MAP INFO PERIODICALLY - WORKAROUND
	msgsrv onMap(int[10][10] mapInfo) {
		// Follow the path in $path$ array
		if(pathPosition < maxPathPosition) {
			int nextPos = path[pathPosition];
			int nextX = nextPos % MAPSIZE;
			int nextY = nextPos / MAPSIZE;
			
			if(mapInfo[nextX][nextY] == OBSTACLE) {
				stop= true;
			} else {
				stop = false;
			}
		}
	}
	
	msgsrv move() {
		if(pathPosition < maxPathPosition) {
			if(!stop) {
				int nextPos = path[pathPosition];
				int nextX = nextPos % MAPSIZE;
				int nextY = nextPos / MAPSIZE;
				
				map.move(posX, posY, nextX, nextY);
				posX = nextX;
				posY = nextY;
				pathPosition++;
			}
			self.move() after(2 * moveDelay);
		}
	}
	
	
}

main {
	/*
	@priority(1) Map map():();
	
	@priority(2) Pathfinder pf():();
	@priority(3) Robot r(rh, pf):(5, 0); // Set the target position
	@priority(4) RobotHardware rh(r, map):(0, 0, EAST); // Set the initial position and rotation and start robot
	
	@priority(2) Pathfinder pf1():();
	@priority(3) Robot r1(rh1, pf1):(7, 5); // Set the target position
	@priority(4) RobotHardware rh1(r1, map):(7, 0, EAST); // Set the initial position and rotation and start robot
	*/
	
	/**/
	// In order to run with SimpleFollower
	// COMMENT OUT THE isOnTargetPosition1, finish1, hasMoved1, isFirstState1 defines 
	// COMMENT OUT THE isRotatingOrMovingWhenNotFinished1, isOnTargetPositionWhenFinished assertions 
	Map map():();
	
	Pathfinder pf():();
	Robot r(rh, pf):(5, 0);
	RobotHardware rh(r, map):(0, 0, EAST);
	
	SimpleFollower sf(map):();
}