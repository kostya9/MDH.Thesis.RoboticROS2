env int msgDelay = 50;
env int moveDelay = 200;

env double laserDist = 3;
env double INFINITY = 9999;
env int lasers = 10;
env double pi = 3.14;
env double minAngle = pi / 4;
env double maxAngle = 3 * pi / 4;
env double angleIncrement = (maxAngle - minAngle) / lasers;
env double laserLength = 10;
env double steps = 20;
env double stepLength = steps / laserLength;

env int COLLISION = -1;


// ROTATIONS
env int NORTH = 0;
env int EAST = 1;
env int SOUTH = 2;
env int WEST = 3;

// STATES
env int TARGET = 0;
env int OBSTACLE_MOVE = 1;
env int OBSTACLE_TURN = 2;
env int FINISH_OBSTACLE_MOVE = 3;
env int FINISH = 4;

// Pathfinder config
env double OBSTACLE_MIN_DIST = 1;
env double OBSTACLE_MOVE_MIN_DIST = 1.5;


reactiveclass RobotHardware(10) {
	knownrebecs {
		Robot robot;
	}
	
	statevars {
		int[20][20] map;
		int posX;
		int posY;
		int rot;
		boolean moving;
		
		// variables for assertion
		int prevPosX;
		int prevPosY;
		int prevRot;
		boolean isFirstState;
	}
	
	RobotHardware()
	{
		moving = true;
		isFirstState = true;
		
		setCollisions();
		laserScanSend();
		moveActuator() after(moveDelay);
	}
	
	// USE THIS METHOD TO SET COLLISIONS ON THE MAP
	void setCollisions() { 
		map[0][1] = COLLISION;
	}
	
	double tan(double angle) {
		if(angle > (pi / 2)) {
			angle = angle - pi;
		}
		
		double x = angle;
		// taylor series expansion
		return x + x*x*x / 3 + 2*x*x*x*x*x/15; 
	} 
	
	double sqrt(double x) {
		// taylor series expansion
		return 1 + (x-1) + (x-1)*(x-1)/2 + (x-1)*(x-1)*(x-1)/6; 
	}
	
	double getDistanceToCollision(double dy, double curAngle) {
		// f(x) = kx
		// x = f(x) / k
		// where k - the tangent of tilt angle
		double dx = dy / tan(curAngle);
		double turnedX, turnedY;
				
		if(rot == NORTH)
		{
			turnedX = dx;
			turnedY = dy;
		}
		else if(rot == EAST)
		{
			turnedX = -dy;
			turnedY = dx;
		}
		else if(rot == SOUTH)
		{
			turnedX = -dx;
			turnedY = dy;
		}
		else if (rot == WEST)
		{
			turnedX = dy;
			turnedY = -dx;
		}
		
		int yIndx = posY + (int)dy;
		int xIndx = posX + (int)dx;
		
		// check collision with end of map
		if ((yIndx >= 20) || (yIndx < 0)) {
			return 0;
		}
		
		// check collision with end of map
		if((xIndx >= 20) || (xIndx < 0)) {
			return 0;
		}
		
		if(map[xIndx][yIndx] == COLLISION) {
			return sqrt(dy * dy + dx * dx);
		}
		
		return INFINITY;
	}
	
	// Send laser data to robot software
	msgsrv laserScanSend() {
		double[10] dists;
		// init array
		for(int i = 0; i < lasers; i++) {
			dists[i] = INFINITY;
		}

		// for each laser 
		// go through distances from 0 to laserLength
		// and if there is collision (and it is the first collision) 
		//     write the distance to it
		// else
		//     do nothing
		double curAngle = minAngle;
		for(int i = 0; i < lasers; i++) {
		
			// test the cells for collision where f(x) = dy
			// f(x) - laser ray function
			for (double dy = 0; dy <= laserLength; dy += stepLength) {
				if(dists[i] == INFINITY) {
					dists[i] = getDistanceToCollision(dy, curAngle);
				}
			}
			curAngle = curAngle + angleIncrement;
		}
		
		robot.onLaserScan(posX, posY, rot, moving, dists);
		
		self.laserScanSend() after(msgDelay);
	}
	
	// Move the actual robot (change pos)
	msgsrv moveActuator() {	
		// no movement when finished
		if(moving)
		{
			int dx, dy;
			if(rot == NORTH)
			{
				dx = 0;
				dy = 1;
			}
			else if(rot == EAST)
			{
				dx = 1;
				dy = 0;
			}
			else if(rot == SOUTH)
			{
				dx = 0;
				dy = -1;
			}
			else if (rot == WEST)
			{
				dx = -1;
				dy = 0;
			}
			
			self.prevPosX = posX;
			self.posX += dx;
			self.prevPosY = posY;
			self.posY += dy;
		}
		
		self.isFirstState = false;
		moveActuator() after(moveDelay);
	}
	
	msgsrv move() {
		moving = true;
	}
	
	msgsrv stop() {
		moving = false;
	}
	
	msgsrv turnLeft() {
		prevRot = rot;
		rot = (rot - 1) % 4;
	}
	
	msgsrv turnRight() {
		prevRot = rot;
		rot = (rot + 1) % 4;
	}
}

reactiveclass Robot(10) {
	knownrebecs {
		RobotHardware rh;
	}
	
	statevars {
		int targetX;
		int targetY;
		boolean finish;
		int state;
		int obstacleEndX;
		int obstacleEndY;
	}
	
	Robot(int x, int y) {
		self.targetX = x;
		self.targetY = y;
	}

	// Straightforward algorithm - just follow target, no collision avoidance
	msgsrv onLaserScan(int posX, int posY, int rot, boolean moving, double[10] laserDistances) {
		if(state == TARGET) {
			TargetFollow(posX, posY, rot, moving, laserDistances);
		}
		else if (state == OBSTACLE_TURN) {
			ObstacleTurn(laserDistances);
		}
		else if (state == OBSTACLE_MOVE) {
			ObstacleMove(posX, posY, moving, laserDistances);
		}
		else if(state == FINISH_OBSTACLE_MOVE) {
			ObstacleEnd(moving);
		}
		else if(state == FINISH) {
			if(!finish) {
				rh.stop();
				finish = true;
			}
		}
	}
	
	void ObstacleTurn(double[10] laserDistances) {
		rh.stop();
		rh.turnLeft();
		state = OBSTACLE_MOVE;
	}
	
	void ObstacleMove(int posX, int posY, boolean moving, double[10] laserDistances) {
		if(IsNextToCollision(laserDistances, OBSTACLE_MIN_DIST) == true) {
			state = OBSTACLE_TURN;
		} else {
		
			for (int i = 0; i < lasers; ++i) 
		    {
		      double cur = laserDistances[i];
		      if(cur < OBSTACLE_MOVE_MIN_DIST)
		      {
		        break;
		      }
		
		      obstacleEndX = posX;
		      obstacleEndY = posY;
		      state = FINISH_OBSTACLE_MOVE;
		    }
			
			if(!moving) {
		    	rh.move();
		    }
		}
	}
	
	double sqrt(double x) {
		// taylor series expansion
		return 1 + (x-1) + (x-1)*(x-1)/2 + (x-1)*(x-1)*(x-1)/6; 
	}
	
	double getDistanceTo(double x, double y) {
		return sqrt(x * x + y * y);
	}
	
	void ObstacleEnd(boolean moving) {
		double distance = getDistanceTo(obstacleEndX, obstacleEndY);

	    if(distance >= 1)
	    {
	    	state = TARGET;
	    }
	
	    if(!moving) {
	    	rh.move();
	    }
	}
	
	boolean IsNextToCollision(double[10] laserDistances, double minDist) {
	    for(int i = 0; i < lasers; i++)
	    {
	      if(laserDistances[i] <= minDist)
	      {
	        return true;
	      }
	    }
	
	    return false;
	}
	
	void TargetFollow(int posX, int posY, int rot, boolean moving, double[10] laserDistances) {
		if(posX == targetX && posY == targetY) {
			state = FINISH;
		}
		else if(IsNextToCollision(laserDistances, OBSTACLE_MIN_DIST) == true) {
			rh.stop();
			state = OBSTACLE_TURN;
		} else {
			boolean stop = false;
			if(targetY > posY) {
				if(rot != NORTH) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(targetY < posY) {
				if(rot != SOUTH) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(targetX > posX) {
				if(rot != EAST) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(targetX < posX) {
				if(rot != WEST) {
					rh.turnRight();
					stop = true;
				}
			}
			
			if(stop) {
				rh.stop();
			}
			else if(!moving) {
				rh.move();
			}
		}
	}
}

main {
	Robot r(rh):((int)5, (int)2);
	RobotHardware rh(r):();
}