env int msgDelay = 20;
env int moveDelay = 100;
env int MAPSIZE = 10;

env double laserDist = 3;
env double INFINITY = 9999;
env int lasers = 10;
env double pi = 3.14;
env double minAngle = pi / 4;
env double maxAngle = 3 * pi / 4;
env double angleIncrement = (maxAngle - minAngle) / lasers;
env double laserLength = 10;
env double steps = 15;
env double stepLength = laserLength / steps;

env int OBSTACLE = -1;


env int NORTH = 0;
env int EAST = 1;
env int SOUTH = 2;
env int WEST = 3;


reactiveclass Map(15) {
	statevars {
		int[10][10] map;
	}
	
	Map() {
		setCollisions();
	}
	
	msgsrv move(int xFrom, int yFrom, int xTo, int yTo) {
		int prev = map[xFrom][yFrom];
		
		if(prev != OBSTACLE) {
			assertion(false, "Expected the FROM coordinate to be an obstacle");
		}
		
		int to = map[xTo][yTo];
		
		if(to == OBSTACLE) {
			assertion(false, "COLLISION: Expected the TO coordinate not to be an obstacle");
		}
		
		map[xFrom][yFrom] = 0;
		map[xTo][yTo] = OBSTACLE;
	}
	
	msgsrv subscribeToMapInfo() {
		infiniteMapInfoSend((RobotHardware)sender) after(msgDelay);
	}
	
	msgsrv infiniteMapInfoSend(RobotHardware h) {
		h.laserScanSend(map);
		
		infiniteMapInfoSend(h) after(msgDelay);
	}
	
	msgsrv setInitialPosition(int x, int y)
	{
		int to = map[x][y];
		
		if(to == OBSTACLE) {
			assertion(false, "Expected the TO coordinate not to be a obstacle");
		}
		
		map[x][y] = OBSTACLE;
	}
	
	// USE THIS METHOD TO SET OBSTACLES ON THE MAP
	void setCollisions() { 
		map[0][1] = OBSTACLE;
		// map[1][1] = OBSTACLE;
	}
}

reactiveclass RobotHardware(10) {
	knownrebecs {
		Robot robot;
		Map mapRebec;
	}
	
	statevars {
		int posX;
		int posY;
		int rot;
		boolean moving;
		
		int nextRot;
		
		// variables for assertion
		int prevPosX;
		int prevPosY;
		int prevRot;
		boolean isFirstState;
	}
	
	RobotHardware(int x, int y, int r)
	{
		posX = x;
		posY = y;
		rot = r;
		
		initMap();
		
		
		moving = true;
		isFirstState = true;
		
		nextRot = rot;

		moveActuator() after(moveDelay);
	}
	
	void initMap() {
		mapRebec.setInitialPosition(posX, posY);
		mapRebec.subscribeToMapInfo();
	}
	
	double tan(double angle) {
		if(angle > (pi / 2)) {
			angle = angle - pi;
		}
		
		double x = angle;
		// taylor series expansion
		return x + x*x*x / 3 + 2*x*x*x*x*x/15; 
	}
	
	double abs(double x) {
		if(x < 0) {
			return -x;
		}
		
		return x;
	}
	
	double sqrt(double x) {
		// Taylor series was not precise enough, so
		// Newton's method was implemented lower
		double prev = 4;
		double next = 5;
		while(abs(prev - next) > 0.1) {
			prev = next;
			next = 0.5 * ((x/prev) + prev);
		}
		
		return next;
	}
	
	double getDistanceToCollision(int[10][10] map, double dy, double curAngle) {
		// f(x) = kx
		// x = f(x) / k
		// where k - the tangent of tilt angle
		double dx = dy / tan(curAngle);
		int turnedX, turnedY;
				
		if(rot == NORTH)
		{
			turnedX = (int)dx;
			turnedY = (int)dy;
		}
		else if(rot == EAST)
		{
			turnedX = (int)dy;
			turnedY = (int)-dx;
		}
		else if(rot == SOUTH)
		{
			turnedX = (int)-dx;
			turnedY = (int)-dy;
		}
		else if (rot == WEST)
		{
			turnedX = (int)-dy;
			turnedY = (int)dx;
		}
		
		int yIndx = posY + turnedY;
		int xIndx = posX + turnedX;
		
		// check collision with end of map
		if ((yIndx >= MAPSIZE) || (yIndx < 0)) {
			return 0;
		}
		
		// check collision with end of map
		if((xIndx >= MAPSIZE) || (xIndx < 0)) {
			return 0;
		}
		
		if(xIndx == posX && yIndx == posY) {
			return INFINITY;
		}
		
		if(map[xIndx][yIndx] == OBSTACLE) {
			return sqrt(dy * dy + dx * dx);
		}
		
		return INFINITY;
	}
	
	// Send laser data to robot software
	msgsrv laserScanSend(int[10][10] map) {
		double[10] dists;
		// init array
		for(int i = 0; i < lasers; i++) {
			dists[i] = INFINITY;
		}

		// for each laser 
		// go through distances from stepLength to laserLength
		// and if there is collision (and it is the first collision) 
		//     write the distance to it
		// else
		//     do nothing
		double curAngle = minAngle;
		for(int i = 0; i < lasers; i++) {
		
			// test the cells for collision where f(x) = dy
			// f(x) - laser ray function
			for (double dy = stepLength; dy <= laserLength; dy += stepLength) {
				if(dists[i] == INFINITY) {
					dists[i] = getDistanceToCollision(map, dy, curAngle);
				}
			}
			curAngle = curAngle + angleIncrement;
		}
		
		robot.onLaserScan(posX, posY, rot, moving, dists);
	}
	
	// Move the actual robot (change pos)
	msgsrv moveActuator() {
		if(nextRot != rot) {
			// rotating
			prevRot = rot;
			rot = nextRot;
		}
		// no movement when finished
		else if(moving)
		{
			int dx, dy;
			if(rot == NORTH)
			{
				dx = 0;
				dy = 1;
			}
			else if(rot == EAST)
			{
				dx = 1;
				dy = 0;
			}
			else if(rot == SOUTH)
			{
				dx = 0;
				dy = -1;
			}
			else if (rot == WEST)
			{
				dx = -1;
				dy = 0;
			}
			
			self.prevPosX = posX;
			self.posX += dx;
			self.prevPosY = posY;
			self.posY += dy;

			mapRebec.move(prevPosX, prevPosY, posX, posY);
		}
		
		self.isFirstState = false;
		moveActuator() after(moveDelay);
	}
	
	msgsrv move() {
		moving = true;
	}
	
	msgsrv stop() {
		moving = false;
	}
	
	msgsrv turnLeft() {
		if(rot == 0) {
			nextRot = 3;
		} else {
			nextRot = rot - 1;
		}
	}
	
	msgsrv turnRight() {
		if(rot == 3) {
			nextRot = 0;
		} else {
			nextRot = rot + 1;
		}
	}
}

reactiveclass Robot(10) {
	knownrebecs {
		RobotHardware rh;
	}
	
	statevars {
		int targetX;
		int targetY;
		boolean finish;
	}
	
	Robot(int x, int y) {
		self.targetX = x;
		self.targetY = y;
	}

	// Straightforward algorithm - just follow target, no collision avoidance
	msgsrv onLaserScan(int posX, int posY, int rot, boolean moving, double[10] laserDistances) {
		if(posX == targetX && posY == targetY) {
			if(!finish) {
				rh.stop();
				finish = true;
			}
		} else {
			boolean stop = false;
			if(targetY > posY) {
				if(rot != NORTH) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(targetY < posY) {
				if(rot != SOUTH) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(targetX > posX) {
				if(rot != EAST) {
					rh.turnRight();
					stop = true;
				}
			}
			else if(targetX < posX) {
				if(rot != WEST) {
					rh.turnRight();
					stop = true;
				}
			}
			
			if(stop) {
				rh.stop();
			}
			else if(!moving) {
				rh.move();
			}
		}
	}
}

main {
	Map map():();
	Robot r(rh):((int)5, (int)2);
	RobotHardware rh(r, map):(0, 0, NORTH);
}